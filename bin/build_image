#!/usr/bin/env bash

block_size=1000000
size_unit=gb

tiramisu_zip=/root/tiramisu.zip
sigpatches_rpx=/root/01_sigpatches.rpx
ufdiine_zip=/root/ufdiine.zip
bloopair_zip=/root/bloopair.zip
appstore_zip=/root/appstore.zip

if [ -z "$1" ]; then
  echo "usage: $(basename $0) <image size in gb>"
  exit 1
fi

if [[ $1 =~ [^0-9] ]]; then
  echo "error: <image size in gb> must be an integer"
  exit 1
fi

for file in $tiramisu_zip $ufdiine_zip $sigpatches_rpx $bloopair_zip $appstore_zip; do
  if [ -e "$file" ]; then
    sha1sum $file
  else
    echo "FATAL: critical file $file missing. Aborting image creation."
    exit 1
  fi
done

if [ "$2" == "--bytes" ]; then
  size_unit=b
fi

die() {
  echo "$@"
  exit 1
}

case $size_unit in
  b)
    size_bytes=$1
    ;;
  gb)
    size_bytes=$(( 1000 * 1000 * 1000 * $1 ))
    ;;
esac

expected_size() {
  local file=$1
  local size_bytes=$2

  if [ ! -e "$file" ]; then
    return 1
  fi

  actual_size=$(stat $file -c '%s')

  [ $actual_size -eq $size_bytes ]
}

# This will trim the image to the nearest number of blocks, minimizing
# wasted space.
count=$(( $size_bytes / $block_size ))
size_bytes=$(( $count * $block_size ))
image=/mnt/work/disk.img

if ! expected_size $image $size_bytes; then
  echo "Creating emtpy disk image..."
  dd if=/dev/zero of=$image bs=$block_size count=$count || die "failed"
fi

echo "Formating disk image for fat32..."
mkfs.vfat -S 512 -s 64 $image || die "failed"

echo "Mounting disk image..."
mkdir -p /mnt/image
mount -o loop $image /mnt/image || die "failed"

echo "Extracting tiramisu..."
unzip $tiramisu_zip -d /mnt/image || die "failed"
unzip $ufdiine_zip -d /mnt/image || die "failed"
unzip $bloopair_zip -d /mnt/image || die "failed"
unzip $appstore_zip -d /mnt/image || die "failed"

echo "Copying sigpatcher..."
cp $sigpatches_rpx /mnt/image/wiiu/environments/installer/modules/setup || die "failed"

echo "Done"
exit 0
